name: Release Packaging

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      font_name:
        description: '包的字体名称前缀（覆盖默认设置） / Font name prefix for packages (overrides default)'
        required: false
        default: 'Plangothic'
      tag_version:
        description: '手动运行时的标签版本 / Tag version for manual run'
        required: false
        default: ''

env:
  DEFAULT_FONT_NAME: Plangothic

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_vars.outputs.version }}
      font_name: ${{ steps.set_vars.outputs.font_name }}
    steps:
      - name: 签出代码 / Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set VERSION and FONT_NAME
        id: set_vars
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.tag_version || format('dev-{0}', github.run_number) }}
          fi

          FONT_NAME=${{ github.event.inputs.font_name || env.DEFAULT_FONT_NAME }}

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "font_name=$FONT_NAME" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y p7zip-full

      - name: 验证字体文件夹 / Validate font folders
        run: |
          missing_dirs=()
          for d in otf static web; do
            if [[ -d "fonts/$d" ]]; then
              echo "✓ fonts/$d exists"
            else
              echo "⚠ fonts/$d missing"
              missing_dirs+=("$d")
            fi
          done

          if [[ ${#missing_dirs[@]} -gt 0 && "${{ matrix.pkg }}" != "Super" ]]; then
            echo "::warning::Missing directories: ${missing_dirs[*]}"
          fi

  package:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pkg: [OTF, Static, Web, Super]
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
      FONT_NAME: ${{ needs.prepare.outputs.font_name }}
      PKG: ${{ matrix.pkg }}
    steps:
      - name: 签出代码 / Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 准备打包目录 / Prepare package dir
        shell: bash
        run: |
          set -euo pipefail

          echo "Packaging $PKG for version $VERSION..."
          mkdir -p dist

          TARGET="dist/${FONT_NAME}-${PKG}-${VERSION}"
          mkdir -p "$TARGET"

          if [[ "$PKG" == "Super" ]]; then
            cp -r fonts/* "$TARGET"/
          else
            sub=$(echo "$PKG" | tr '[:upper:]' '[:lower:]')
            if [[ -d "fonts/$sub" ]]; then
              cp -r "fonts/$sub"/* "$TARGET"/
            else
              echo "⚠ fonts/$sub not found, skipping"
            fi
          fi

      - name: Compress files
        run: |
          cd dist
          base="${FONT_NAME}-${PKG}-${VERSION}"

          zip -qr "${base}.zip" "$base" &
          7z a -t7z -mx=9 "${base}.7z" "$base" &
          wait

          ls -lh "${base}."*

      - name: 上传工件(手动运行) / Upload artifact (manual run)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FONT_NAME }}-${{ matrix.pkg }}-${{ env.VERSION }}.7z
          path: dist/${{ env.FONT_NAME }}-${{ matrix.pkg }}-${{ env.VERSION }}.7z
          retention-days: 7

      - name: 上传到发行版 / Upload to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/${{ env.FONT_NAME }}-${{ matrix.pkg }}-${{ env.VERSION }}.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-changelog:
    needs: [prepare, package]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
      FONT_NAME: ${{ needs.prepare.outputs.font_name }}
      REPO: ${{ github.repository }}
    steps:
      - name: 生成下载链接 / Generate download links
        id: generate_links
        run: |
          set -euo pipefail

          BASE_URL="https://github.com/${REPO}/releases/download/${VERSION}"
          packages=(Super Static OTF Web)

          table="### 下载链接\n\n| Package | 7z | zip |\n| -- | -- | -- |"
          for pkg in "${packages[@]}"; do
            table+=$'\n'"| $pkg | [📦 Download](${BASE_URL}/${FONT_NAME}-$pkg-$VERSION.7z) | [📦 Download](${BASE_URL}/${FONT_NAME}-$pkg-$VERSION.zip) |"
          done

          echo -e "$table"

          echo "links<<EOF" >> $GITHUB_OUTPUT
          echo -e "$table" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 更新发行版描述 / Update release description
        run: |
          current_notes=$(gh release view "$VERSION" --json body --jq '.body')
          new_notes="${current_notes}"$'\n\n'"${{ steps.generate_links.outputs.links }}"
          gh release edit "$VERSION" --notes "$new_notes"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
